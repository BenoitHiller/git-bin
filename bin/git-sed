#!/bin/bash

GSED_BIN="${GSED_BIN:-sed}"

OPTIONS_SPEC="\
git sed [options] [sed-expression]

Runs the specified sed expression on every file in the current repository.

ENVIRONMENT VARIABLES

\$GSED_BIN default: \"sed\"
    specifies the name of the sed executable used for gnu sed. I've needed this
    in the past when I've used OSX and had GNU tools set up, but not replacing
    the default ones due to some incompatibilities. In this case there are
    differences in how the default sed on OSX doesn't let you do an in-place
    replacement without specifying a backup suffix.
--
e,exclude!=pattern \
  Adds a pathspec of the form ':(exclude,glob)pattern' to the list of pathspecs.
g,grep!=pattern \
  Run only on files that match the specified regex.
i,include!=pattern \
  Adds a pathspec of the form ':(glob)pattern' to the list of pathspecs.
p,pathspec!=pathspec \
  Run only on files that match the specified pathspec. Can be specified multiple times.
"
# Use the --stuck-long option because we are just passing everything through
# without looking at it and this way we don't need to know anything about the
# structure of the options to do that.
OPTIONS_STUCKLONG=true
SUBDIRECTORY_OK=true

# run our version of git-xargs regardless of whether it is in the path or not.
git-xargs() {
  # Fetch the directory of the current source file, we don't care if it is
  # relative or not as we will use it immediately.
  local -r SOURCE_DIRECTORY="$(dirname -- ${BASH_SOURCE[0]})"

  "$SOURCE_DIRECTORY/git-xargs" "$@"
}

main() {
  source "$(git --exec-path)/git-sh-setup"
  require_work_tree

  local -a xargsOptions=( )

  while [[ "$#" > 0 ]]; do
    case "$1" in
      --)
        shift
        break
      ;;
      *)
        xargsOptions+=( "$1" )
      ;;
    esac
    shift
  done

  local -r expression="$1"

  git-xargs "${xargsOptions[@]}" -- "$GSED_BIN" -Ei "$expression"
}

main "$@"

#!/bin/bash

VIM_BIN="${VIM_BIN:-vim}"
OPTIONS_SPEC="\
git vsed [options] <search> <replacement>

Performs a vim substitution with confirmation on all files tracked by git in
the current respository.

Note: technically git-grep is used to filter the files first so that vim isn't
literally opening every file in the entire project.

ENVIRONMENT VARIABLES

\$VIM_BIN default: vim
    Sets the vim used by this program. This is needed because this is a bash
    script, so if you are using zsh and configured an alias for nvim this
    script isn't going to find it and you will want to configure this
    environment variable to fix that.
--
d,delim!=delim set the delimeter used in the vim s command. Defaults to %.
e,exclude!=pattern \
  Adds a pathspec of the form ':(exclude,glob)pattern' to the list of pathspecs.
i,include!=pattern \
  Adds a pathspec of the form ':(glob)pattern' to the list of pathspecs.
p,pathspec!=pathspec \
  Run only on files that match the specified pathspec. Can be specified multiple times.
"
OPTIONS_STUCKLONG=true
SUBDIRECTORY_OK=true

# run our version of git-xargs regardless of whether it is in the path or not.
git-xargs() {
  # Fetch the directory of the current source file, we don't care if it is
  # relative or not as we will use it immediately.
  local -r SOURCE_DIRECTORY="$(dirname -- ${BASH_SOURCE[0]})"

  "$SOURCE_DIRECTORY/git-xargs" "$@"
}

main() {
  source "$(git --exec-path)/git-sh-setup"

  require_work_tree

  local d="%"
  local xargsOptions=( )

  while [[ "$#" > 0 ]]; do
    case "$1" in
      --delim=*)
        # extract the suffix/argument which is everything after the first =
        d="${1#*=}"
      ;;

      --)
        shift
        break
      ;;

      *)
        xargsOptions+=( "$1" )
      ;;
    esac
    shift
  done

  if [[ "$#" < 2 ]]; then
    usage
  fi

  local -r search="$1"
  local -r replacement="$2"

  # argdo runs a specified command on every file that was passed in the
  # arguments list when vim was started, which happens to be exactly what we
  # want.
  #
  # Note that we are already adding the \v into the vim regex to turn on magic
  # mode and get behaviour that matches more closely with grep -E.
  #
  # The | update at the end makes vim save only the modified files.
  local vimCommand="argdo %s${d}\\v${search}${d}${replacement}${d}gc | update"

  git-xargs -o "${xargsOptions[@]}" -g "$search" -- "$VIM_BIN" -c "$vimCommand"
}

main "$@"
